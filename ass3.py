from flask import Flask, request, abort
from neo4j import GraphDatabase
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage
from linebot.exceptions import InvalidSignatureError
from sentence_transformers import SentenceTransformer
import faiss, numpy as np, random, os

# === Config ===
app = Flask(__name__)
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN", "<YOUR_TOKEN>")
LINE_CHANNEL_SECRET = os.getenv("LINE_SECRET", "<YOUR_SECRET>")
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# === Neo4j ===
driver = GraphDatabase.driver("bolt://localhost:7687", auth=("neo4j", "password"))

# === Embedding Model ===
model = SentenceTransformer("paraphrase-multilingual-MiniLM-L12-v2")

# === ‡πÇ‡∏´‡∏•‡∏î Keywords ‡∏à‡∏≤‡∏Å Neo4j ===
def load_keywords():
    with driver.session() as session:
        query = """
        MATCH (p:Plant)-[:BELONGS_TO]->(c:Category)
        RETURN p.name AS plant, c.name AS category
        """
        result = session.run(query)
        data = []
        for record in result:
            data.append(record["plant"])
            data.append(record["category"])
        return list(set(data))  # ‡∏•‡∏ö‡∏ã‡πâ‡∏≥

keywords = load_keywords()
embeddings = model.encode(keywords, convert_to_numpy=True)
index = faiss.IndexFlatL2(embeddings.shape[1])
index.add(embeddings)

# === FAISS Search ===
def find_similar_keyword(user_text):
    vec = model.encode([user_text], convert_to_numpy=True)
    D, I = index.search(vec, 1)
    return keywords[I[0][0]]

# === Query Neo4j ===
def search_plants(keyword):
    with driver.session() as session:
        query = """
        MATCH (p:Plant)-[:BELONGS_TO]->(c:Category)
        WHERE p.name CONTAINS $kw OR c.name CONTAINS $kw
        RETURN p.name AS name, p.price AS price, c.name AS category, p.image AS image
        LIMIT 5
        """
        result = session.run(query, kw=keyword)
        return [record.data() for record in result]

# === Customer Need Questions Pool ===
questions_pool = [
    "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡∏á‡πà‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÇ‡∏ï‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ï‡∏ä‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏£‡πà‡∏°‡πÄ‡∏á‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏î‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πâ‡πÉ‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏£‡∏±‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏´‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πâ‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ó‡∏ô‡πÅ‡∏î‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏ô‡∏£‡πà‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
    "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏ß‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ß‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö?"
]

# === User Session ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠ ===
user_sessions = {}  # key = userId, value = list of questions + current index

# === LINE Webhook ===
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return 'OK'

# === LINE Event ===
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    user_text = event.message.text.strip()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if user_id not in user_sessions:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà: ‡∏™‡∏∏‡πà‡∏° 6‚Äì12 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        num_questions = random.randint(6, 12)
        user_sessions[user_id] = {
            "questions": random.sample(questions_pool, num_questions),
            "index": 0
        }

    session = user_sessions[user_id]

    # ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if session["index"] < len(session["questions"]):
        next_question = session["questions"][session["index"]]
        session["index"] += 1
        reply = f"‚ùì {next_question}"
    else:
        # ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ó‡∏≥ FAISS + Neo4j Search
        similar_kw = find_similar_keyword(user_text)
        plants = search_plants(similar_kw)

        if plants:
            reply = f"üîç ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á: {similar_kw}\n\n"
            for p in plants:
                reply += f"- {p['name']} ({p['category']}) ‡∏£‡∏≤‡∏Ñ‡∏≤ {p['price']} ‡∏ö‡∏≤‡∏ó\n"
        else:
            reply = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"

        # ‡∏•‡∏ö session ‡∏Ç‡∏≠‡∏á user ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        del user_sessions[user_id]

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö LINE
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply)
    )

if __name__ == "__main__":
    app.run(port=5000, debug=True)
